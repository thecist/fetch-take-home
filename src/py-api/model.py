# generated by datamodel-codegen:
#   filename:  api.yaml
#   timestamp: 2025-05-29T23:39:53+00:00

from __future__ import annotations

from datetime import date, time
# Pattern needs to be imported from typing for Pydantic to recognize it
# correctly in the Field pattern argument.
from typing import List, Pattern

from pydantic import BaseModel, Field, constr

class Item(BaseModel):
  short_description: constr = Field(
    ...,
    description='The Short Product Description for the item.',
    example='Mountain Dew 12PK',
    pattern=r'^[\w\s\-]+$',
    alias='shortDescription'
  )
  price: constr = Field(
    ...,
    description='The total price payed for this item.',
    example='6.49',
    pattern=r'^\d+\.\d{2}$'
  )


class Receipt(BaseModel):
  retailer: constr = Field(
    ...,
    description='The name of the retailer or store the receipt is from.',
    example='M&M Corner Market',
    pattern=r'^[\w\s\-&]+$'
  )
  purchase_date: date = Field(
    ...,
    description='The date of the purchase printed on the receipt.',
    example='2022-01-01',
    alias='purchaseDate'
  )
  purchase_time: time = Field(
    ...,
    description='The time of the purchase printed on the receipt. 24-hour time expected.',
    example='13:01',
    
  )
  items: List[Item] = Field(..., min_items=1)
  total: constr = Field(
    ...,
    description='The total amount paid on the receipt.',
    example='6.49',
    pattern=r'^\d+\.\d{2}$'
  )

class ReceiptProcessResponse(BaseModel):
  id: constr = Field(
    ...,
    description='The ID assigned to the receipt.',
    example='adb6b560-0eef-42bc-9d16-df48f30e89b2',
    pattern=r'^\S+$'
  )

class ReceiptPointResponse(BaseModel):
  points: int = Field(
    ...,
    description='The number of points awarded.',
    example=100
  )